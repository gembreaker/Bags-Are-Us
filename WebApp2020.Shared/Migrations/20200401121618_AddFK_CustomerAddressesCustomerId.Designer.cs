// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp2020.Shared.Models;

namespace WebApp2020.Shared.Migrations
{
    [DbContext(typeof(WebApp2020DbContext))]
    [Migration("20200401121618_AddFK_CustomerAddressesCustomerId")]
    partial class AddFK_CustomerAddressesCustomerId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.Addresses", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Line2")
                        .HasMaxLength(100);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("AddressId")
                        .HasName("PK_AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.BagType", b =>
                {
                    b.Property<int>("BagTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BagTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BagType1")
                        .IsRequired()
                        .HasColumnName("BagType")
                        .HasMaxLength(25);

                    b.HasKey("BagTypeId");

                    b.ToTable("BagType");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.Colour", b =>
                {
                    b.Property<int>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ColourID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("ColourId");

                    b.ToTable("Colour");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.CustomerAddresses", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.HasKey("AddressId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DateOrdered");

                    b.Property<DateTime>("DatePurchased");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnName("PaymentTypeID");

                    b.HasKey("OrderId")
                        .HasName("PK_OrderID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardNumber");

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PaymentTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.ProductDetails", b =>
                {
                    b.Property<int>("ProductCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BagTypeId")
                        .HasColumnName("BagTypeID");

                    b.Property<int?>("ColourId")
                        .HasColumnName("ColourID");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(50);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RangeId")
                        .HasColumnName("RangeID");

                    b.HasKey("ProductCode")
                        .HasName("PK_ProductCode");

                    b.HasIndex("BagTypeId");

                    b.HasIndex("ColourId");

                    b.HasIndex("RangeId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.ProductOrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(29, 0)")
                        .HasComputedColumnSql("([Quantity]*[UnitPrice])");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrderDetails");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.RangeType", b =>
                {
                    b.Property<int>("RangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RangeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RangeName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RangeId")
                        .HasName("PK_RangeID");

                    b.ToTable("RangeType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.CustomerAddresses", b =>
                {
                    b.HasOne("WebApp2020.Shared.Models.Addresses", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_AddressID");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.OrderDetails", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebApp2020.Shared.Models.PaymentType", "PaymentType")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PaymentTypeId")
                        .HasConstraintName("FK_PaymentTypeID");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.PaymentType", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.ProductDetails", b =>
                {
                    b.HasOne("WebApp2020.Shared.Models.BagType", "BagType")
                        .WithMany("ProductDetails")
                        .HasForeignKey("BagTypeId")
                        .HasConstraintName("FK_BagTypeID");

                    b.HasOne("WebApp2020.Shared.Models.Colour", "Colour")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColourId")
                        .HasConstraintName("FK_ColourID");

                    b.HasOne("WebApp2020.Shared.Models.RangeType", "Range")
                        .WithMany("ProductDetails")
                        .HasForeignKey("RangeId")
                        .HasConstraintName("FK_RangeID");
                });

            modelBuilder.Entity("WebApp2020.Shared.Models.ProductOrderDetails", b =>
                {
                    b.HasOne("WebApp2020.Shared.Models.OrderDetails", "Order")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderID");

                    b.HasOne("WebApp2020.Shared.Models.ProductDetails", "Product")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductID");
                });
#pragma warning restore 612, 618
        }
    }
}
